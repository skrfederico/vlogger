const express = require('express')
const router = express.Router()

/**
 * Models
 */
const Vlog = require('../models/vlogs')

//ROUTES
//redirect
router.get('/', (req, res) => {
  res.redirect('/vlogs')
})

// Index - route
router.get('/vlogs', (req, res) => {
  //render a template
  // res.send('Should send back all logs')
  Vlog.find({}, (error, allVlogs) => {
    res.render('vlogs/Index', {
      vlogs: allVlogs
    })
  })
})

//put this above your Show route
// New
router.get('/vlogs/new', (req, res) => {
  res.render('vlogs/New')
})

// Show - Route
router.get('/vlogs/:id', (req, res) => {
  const { id } = req.params

  Log.findById(id, (error, foundLog) => {
    if (error) {
      console.log(error)
    }
    console.log(foundLog)
    res.render('vlogs/Show', {
      //log: foundLog
      class: foundVlog.title,
      body: foundVlog.body,
      createdAt: foundVlog.createdAt,
      _id: foundVlog._id
    })
  })
})

// Edit - route
router.get('/vlogs/:id/edit', (req, res) => {
  const { id } = req.params

  Log.findById(id, (err, foundVlog) => {
    res.render('vlogs/Edit', {
      _id: foundVlog._id,
      class: foundVlog.class,
      content: foundVlog.content,
      body: foundVlog.body
    })
  })
})

// Create
router.post('/vlogs/', (req, res) => {
  const { title, body } = req.body
  // console.log(req.body)
  if (req.body.newContent === 'on') {
    //if checked, req.body.newContent is set to 'on'
    req.body.newContent = true
  } else {
    //if not checked, req.body.newContent is undefined
    req.body.newContent = false
  }
  Vlog.create(req.body, (error, createdVlog) => {
    //Log.create({ title, body }, (error, createdLog) => {
    // console.log(req.body)
    // console.log(createdLog)
    // //console.error(error)
    // if (!err) {
    //   console.log(createdLog)

    //   res.redirect(`/blog/${createdLog._id}`)
    //   return
    // }
    res.redirect('/vlogs/') // sends to /logs get route
  })

  // Log.create({ title, body }, (error, createdLogPost) => {
  //   // Blog.create({...req.body }, (error, createdBlogPost) => {
  //   if (error) {
  //     res.status(400).json({ error })
  //     return
  //   }

  //   res.status(200).json(createdLogPost)
  // })
})

// Update - route
router.put('/vlogs/:id', (req, res) => {
  console.log(req.body.body)
  // UPDATE
  //res.send('Should update one log by id')
  if (req.body.newContent === 'on') {
    req.body.newContent = true
  } else {
    req.body.newContent = false
  }
  Vlog.findByIdAndUpdate(req.params.id, req.body, (err, updatedVlog) => {
    if (err) {
      return res.send({ error: err })
    }
    console.log('updatedVlog', updatedVlog)
    res.redirect(`/vlogs/${req.params.id}`)
  })
})

// router.get('/:id', (req, res) => {
//   // this is a straight READ by Id
//   res.send('Should send back one log')
// })

/** 
router.get('/', (req, res) => {
  // this / actually means /logs/
  res.send('Should send back all blogs')
  // -alternative- res.send(req.path)
})
*/

// DELETE
router.delete('/vlogs/:id', (req, res) => {
  // const { id } = req.params
  //res.send('Should delete one log')
  // Log.findByIdAndDelete(id, (error, deletedLog) => {
  console.log(req.params.id)
  Vlog.findByIdAndDelete(req.params.id, (error, deletedVlog) => {
    // if (!error) {
    console.log(req.params.id)
    console.log('Deleted vlog post', { deletedVlog })
    res.redirect('/vlogs')
    // console.log(deletedLog)
    // return
  })
  // res.status(400).send('Try again later...')
})
// })

module.exports = router
